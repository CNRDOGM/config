# ~/.bashrc: executed by bash(1) for non-login shells.

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

#history stuff
export HISTCONTROL=erasedups  # No duplicates
export HISTSIZE=              # Bigger history
shopt -s histappend # Append to ~/.bash_history


# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
   PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt


# If this is an xterm set the title to user@host:dir

case "$TERM" in
    xterm*|rxvt*)
        PS1="\[\e[1;36m\]${debian_chroot:+($debian_chroot)}\u\[\e[1;37m\]@\[\e[1;35m\]\h\[\e[m\]\[\e[1;33m\]\w\[\e[m\]:\\$ "
        ;;
    *)
        ;;
esac


# window/tab title from the shell
PROMPT_COMMAND='echo -ne "\033]0;${USER}@${HOSTNAME}: ${PWD/$HOME/~}\007"'

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls -G --color=auto'
    alias grep='grep --color=auto'
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

####################Personal settings#########################

### aliases
alias lt='ls -trh'
alias lr='ls -ltrhR'
alias lll='ls -ltrhFg'
alias h='history | grep'
alias ll='ls -ltrh'
alias df='df -h'
alias mv='mv -iv'
alias cp='cp -iv'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../../...'
alias h='history'
alias ffind='find . -iname'
alias path='echo -e ${PATH//:/\\n}'
alias dt='date +"%T"'
alias ping='ping -c 5'
alias shcpan='perl -MCPAN -e shell'
alias update='su -c "'"apt-get update && apt-get upgrade"'"'
alias cln='su -c "'"apt-get autoremove && apt-get autoclean && apt-get clean"'"'
alias poweroff='su -c "'"systemctl poweroff"'"'
alias restart='su -c "'"systemctl reboot"'"'
alias lsd='ls -l | grep "^d"'
alias lsf='ls -l | grep "^\-"'
alias lsfunct='compgen -A function | grep -v _'
alias freedom='su -c "'"free -h && sync && echo 3 > /proc/sys/vm/drop_caches && free -h"'"'
alias reloadbash='source $HOME/.bashrc'
alias ccat="source-highlight --out-format=esc -o STDOUT -i"
alias R="R -q"
alias ps10="ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head -11"
alias pip_update='su -c "'"pip freeze --local | grep -v '^\-e' | cut -d = -f 1  | xargs -n1 pip install -U"'"'
alias rsync='rsync -abviuzP'
alias rmln='find -type l -exec unlink {} \;'
alias ipconfig='wget -qO- ifconfig.co'

### Functions
fastqc_withRM () {
    fastqc --nogroup -f fastq $1
    rm *_fastqc.zip
}

alias fastqc2=fastqc_withRM

extract () {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2)	tar xjf $1		;;
			*.tar.gz)	tar xzf $1		;;
			*.bz2)		bunzip2 $1		;;
			*.rar)		rar x $1		;;
			*.gz)		gunzip $1		;;
			*.tar)		tar xf $1		;;
			*.tbz2)		tar xjf $1		;;
			*.tgz)		tar xzf $1		;;
			*.zip)		unzip $1		;;
			*.Z)		uncompress $1	;;
			*)			echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

ziprm () {
	if [ -f $1 ] ; then
		unzip $1
		rm $1
	else
		echo "Need a valid zipfile"
	fi
}

psgrep() {
	if [ ! -z $1 ] ; then
		echo "Grepping for processes matching $1..."
		ps aux | grep $1 | grep -v grep
	else
		echo "!! Need name to grep for"
	fi
}

grab() {
	sudo chown -R ${USER} ${1:-.}
}

# remind me, its important!
# usage: remindme <time> <text>
# e.g.: remindme 10m "omg, the pizza"

function remindme()
{
    sleep $1 && zenity --info --text "$2" &
}

#Kill processes matching a given pattern
function pskill()
{
    ps ax | grep "$1" | grep -v grep | awk '{ print $1 }' | xargs kill
}

function mkcd { #make dir and cd into it
  if [ ! -n "$1" ]; then
    echo "Enter a directory name"
  elif [ -d $1 ]; then
    echo "\`$1' already exists"
  else
    mkdir $1 && cd $1
  fi
}

function my_ps()
{
    ps $@ -u $USER -o pid,%cpu,%mem,bsdtime,command ;
}

function pp()
{
    my_ps f | awk '!/awk/ && $0~var' var=${1:-".*"} ;
}

function my_ip() # Get IP adress on ethernet.
{
    MY_IP=$(/sbin/ifconfig wlan0 | awk '/inet/ { print $2 } ' |
      sed -e s/addr://)
    echo ${MY_IP:-"Not connected"}
}

function ii()   # Get current host related info.
{
    echo -e "\nYou are logged on ${BRed}$HOST"
    echo -e "\n${BRed}Additionnal information:$NC " ; uname -a
    echo -e "\n${BRed}Users logged on:$NC " ; w -hs |
             cut -d " " -f1 | sort | uniq
    echo -e "\n${BRed}Current date :$NC " ; date
    echo -e "\n${BRed}Machine stats :$NC " ; uptime
    echo -e "\n${BRed}Memory stats :$NC " ; free
    echo -e "\n${BRed}Diskspace :$NC " ; mydf / $HOME
    echo -e "\n${BRed}Local IP Address :$NC" ; my_ip
    echo -e "\n${BRed}Open connections :$NC "; su;
    echo
}

compress ()
{
    if [ -n "$1" ] ; then
        FILE=$1
        case $FILE in
        *.tar) shift && tar cf $FILE $* ;;
        *.tar.bz2) shift && tar cjf $FILE $* ;;
        *.tar.gz) shift && tar czf $FILE $* ;;
        *.tgz) shift && tar czf $FILE $* ;;
        *.zip) shift && zip $FILE $* ;;
        *.rar) shift && rar $FILE $* ;;
        esac
    else
        echo "usage: compress <foo.tar.gz> ./foo ./bar"
    fi
}

function permission() { "su -c 'chmod -R u=rwX,g=rX,o= "$@"'" ;}

encrypt () { gpg -ac --no-options "$1"; }
decrypt () { gpg --no-options "$1"; }

# finds directory sizes and lists them for the current directory
dirsize ()
{
    du -shx * .[a-zA-Z0-9_]* . 2> /dev/null | \
    egrep '^ *[0-9.]*[MG]' | sort -n > /tmp/list
    egrep '^ *[0-9.]*M' /tmp/list
    egrep '^ *[0-9.]*G' /tmp/list
    rm -rf /tmp/list
}

# $PATH settings

if [ -d "$HOME/bin" ] ; then
    export PATH=$HOME/bin:$PATH
fi

export LESS='-R'
export LESSOPEN='|~/.lessfilter %s'
export PAGER="/usr/bin/most -s"
export R_LIBS=$HOME/bin/R
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$HOME/bin/edirect
export PS1="\[\033[1;31m\]\342\226\210\342\226\210 \u@\h\[\e[m\]\[\e[33m\]\n\[\033[1;32m\]\342\226\210\342\226\210 \w\n\[\033[1;34m\]\342\226\210\342\226\210\\$ \[\033[0;39m\]"
export TERM="xterm-256color"
export LS_OPTIONS='--color=auto'
export NO_AT_BRIDGE=1
PATH="$HOME/bin/perl5/bin${PATH+:}${PATH}"; export PATH;
PERL5LIB="$HOME/bin/perl5/lib/perl5${PERL5LIB+:}${PERL5LIB}"; export PERL5LIB;
PERL_LOCAL_LIB_ROOT="$HOME/bin/perl5${PERL_LOCAL_LIB_ROOT+:}${PERL_LOCAL_LIB_ROOT}"; export PERL_LOCAL_LIB_ROOT;
PERL_MB_OPT="--install_base \"$HOME/bin/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=$HOME/bin/perl5"; export PERL_MM_OPT;
